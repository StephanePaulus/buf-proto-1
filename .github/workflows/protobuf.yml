# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      # Run `git checkout`
      - uses: actions/checkout@v3
      # Install the `buf` CLI
      - uses: bufbuild/buf-setup-action@v1.19.0
      # Ensure that `buf` is installed
      - run: |
          buf --version
          buf lint

  get-versions:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        id: versions
        run: echo -e "modules=$(./gradlew printVersions -q)" >> "$GITHUB_OUTPUT"

      - name: Use the value
        id: step_two
        run: |
          echo "${{ steps.versions.outputs.modules }}"
          echo "${{ toJSON(steps.versions.outputs.modules) }}"
    outputs:
      modules: ${{ steps.versions.outputs.modules }}

  example_matrix:
    runs-on: ubuntu-latest
    needs: get-versions
#    strategy:
#      matrix:
#        modules: ${{ fromJSON(needs.get-versions.outputs.modules) }}
    steps:
#      # Run `git checkout`
#      - uses: actions/checkout@v3
#      # Install the `buf` CLI
#      - uses: bufbuild/buf-setup-action@v1.19.0
#      # Ensure that `buf` is installed
#      - run: |
#          buf generate ${{ matrix.modules.module }}/proto
      - name: print
        run: |
#          echo ${{ matrix.modules.module.version }}
          echo ${{ needs.get-versions.outputs.modules }}
          echo ${{ fromJSON(needs.get-versions.outputs.modules) }}



